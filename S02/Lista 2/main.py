   ###                           ##              ####
  ####                          ###              ####
  ###  ##########   ######## ########  #######   ####
 ####  ##### ####  ####  ####  ###   ####  #### #### 
 ####  ###   ####   ########  ####  ########### #### 
####  ####   #### ####  ####  ####  ####        ###  
####  ###    ### ########### ###### ########## ####                 S202 - Banco de dados II
#### ####   ####  ##########  ####   ######    ###       Prof. Dr. Jonas Lopes de Vilas Boas

# Exercício Avaliativo 4 - Banco de dados orientado à colunas e Cassandra

"""
Estoque da Montadora 

Um fabricante de automóveis contratou você para desenvolver um sistema de banco de dados distribuído usando o Cassandra para as linhas de montagem de toda a corporação, onde cada máquina pudesse acessar a base de dados e buscar as peças de maneira correta para ser montada nos respectivos modelos de veículos. Para isso, você deverá criar a tabela estoque no sistema DataStax ASTRA e inserir as colunas usando o arquivo auxiliar disponibilizado junto com essa atividade. 

Questão 1: Siga os itens listados abaixo: 

Faça a inserção de uma nova peça com os dados abaixo: 

id: 5 
nome: Pistao 
carro: Mustang 
estante: 4 
nível: 1 
quantidade: 167 

Faça a inserção de uma nova peça com os dados abaixo: 

id: 4
nome: Suspencao 
carro: Argo 
estante: 1 
nível: 1 
quantidade: 3500 

Questão 2: Escreva o comando CQL utilizado para cada item abaixo: 

Faça uma busca no banco de dados que retorno todos os dados do item com nome 'Pistão';
Faça uma busca no banco que calcule a média aritmética da quantidade de todas as colunas armazenadas na tabela;
Faça uma busca que retorne quantas colunas tem armazenadas na tabela;
Busque a maior e a menor quantidade de peças usando as alias "maior quantidade" e "menor quantidade" para a tabela estoque. 
Faça uma busca que retorne os atributos nome, carro e quantidade, onde a estante seja igual a 3;
Faça uma busca que retorne a média aritmética da quantidade onde o nível seja igual a 1; 
Faça uma busca retornando todos os atributos onde a estante seja menor do que 3 e o nível seja maior do que 4.
 

Questão 3: Elabore um script Python que seja capaz de fazer uma consulta mostrando nome, estante e quantidade do carro fornecido pelo usuário. 

"""

import json

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory 

class CassandraConnector:
	
	def get_cassandra_connector(self):
		if(self.cassandra_session == None):
			# This secure connect bundle is autogenerated when you download your SCB, 
			# if yours is different update the file name below
			cloud_config= {
				"secure_connect_bundle": "secure-connect-db-montadora.zip"
			}

			# This token JSON file is autogenerated when you download your token, 
			# if yours is different update the file name below
			with open("db_montadora-token.json") as f:
				secrets = json.load(f)

			CLIENT_ID = secrets["clientId"]
			CLIENT_SECRET = secrets["secret"]

			auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
			cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
			cassandra_session = cluster.connect()
			cassandra_session.row_factory = dict_factory

			# Use your keyspace name
			self.cassandra_session.set_keyspace("keyspace_montadora")
		return self.cassandra_session
    
class AutoPart:
    def __init__(self, name, car, shelf, level, amount):
      self.name = name
      self.car = car
      self.shelf = shelf
      self.level = level
      self.amount = amount

    def to_dict(self):
      return {
          "name": self.name,
          "car": self.car,
          "shelf": self.shelf,
          "level": self.level,
          "amount": self.amount
	}


class AutoPartDAO:
    def __init__(self):
        self.cassandra_session = CassandraConnector.get_cassandra_connector()

    def create_table(self):
        result = CassandraConnector.execute(
            'CREATE TABLE estoque(id INT, nome TEXT, car TEXT, shelf INT, level INT, amount INT, PRIMARY KEY((id), shelf, level));'
        )
        if(result is not None):
            print('SUCESSO!')
    
    def add_part(self):
        pass
    
    def get_part(self, name):
        pass

    def get_average_amount(self):
        result = CassandraConnector.execute(f'SELECT AVG * FROM estoque;')
        if(result is not None):
            print('SUCESSO!')

    def get_total_amount(self):
        result = CassandraConnector.execute(f'SELECT COUNT * FROM estoque;')
        if(result is not None):
            print('SUCESSO!')

    def get_max_min(self):
        result = CassandraConnector.execute(f'SELECT MIN(amount), MAX(amount) FROM estoque;')
        if(result is not None):
            print('SUCESSO!')

    def get_parts_from_shelf(self, shelf):
        result = CassandraConnector.execute(f'SELECT name, car, amount FROM estoque WHERE shelf = "{shelf}" ALLOW FILTERING;')
        if result is not None:
            for r in result:
                print(r)

    def get_average_amount_from_level(shelf, level):
        result = CassandraConnector.execute(f'SELECT AVG(amount) FROM estoque WHERE level = "{level}" ALLOW FILTERING;')
        if result is not None:
            for r in result:
                print(r)

    def get_parts_from_shelf_and_level(self, shelf, level):
        result = CassandraConnector.execute(f'SELECT * FROM estoque WHERE level >= "{level}", shelf <= "{shelf}" ALLOW FILTERIBG;')

    def get_parts_of_car(self, car):
        result = CassandraConnector.execute(f'SELECT name, shelf, amount FROM estoque WHERE car = "{car}";')
        if result is not None:
            for r in result:
                print(r)

autoPart = AutoPartDAO()
autoPart.create_table()

# Questão 1 -----------
result = CassandraConnector.execute('BEGIN BATCH ' +
    'INSERT INTO estoque(id, name, car, shelf, level, amount) VALUES (5, \'Pistao\', \'Mustang\', 4, 1, 167);' +
    'INSERT INTO estoque(id, name, car, shelf, level, amount) VALUES (4, \'Suspencao\', \'Argo\', 1, 1, 3500);'
    'APPLY BATCH;'
)
if(result is not None):
    print('Sucesso na inserção!')

# Questão 2 e 3 -----------
result = CassandraConnector.execute('SELECT * FROM estoque WHERE nome = \'Pistao\' ALLOW FILTERING;')
autoPart.get_average_amount()
autoPart.get_total_amount()
autoPart.get_max_min()
autoPart.get_parts_from_shelf(3)
autoPart.get_average_amount_from_level(1)
autoPart.get_parts_from_shelf_and_level(3, 4)
carro = input("Nome do carro: ")
autoPart.get_parts_of_car(carro)